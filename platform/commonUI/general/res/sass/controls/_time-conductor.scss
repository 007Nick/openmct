@mixin toiLineHovEffects() {
    &:before,
    &:after {
        background-color: $timeControllerToiLineColorHov;
    }
}

@include keyframes(clock-hands) {
    0% {
        @include transform(translate(-50%, -50%) rotate(0deg));
    }
    100% {
        @include transform(translate(-50%, -50%) rotate(360deg));
    }
}

.l-time-conductor-holder {
    $minW: 500px;
    border-top: 1px solid $colorInteriorBorder;
    min-width: $minW;
    padding-top: $interiorMargin;
}

.time-conductor-icon {
    $c: $colorObjHdrIc;
    $d: 20px;
    background: $c;
    border-radius: 4px;
    height: $d !important;
    width: $d;
    position: relative;
    // Icon shape: brackets
    &:before,
    &:after {
        content: '';
        background: $colorBodyBg;
        position: absolute;
    }
    &:before {
        $in: 7px;
        left: $in;
        top: 0;
        right: $in;
        bottom: 0;

    }
    &:after {
        $in: 4px;
        left: $in;
        top: $in;
        right: $in;
        bottom: $in;
    }

    // Clock hands
    div[class*="hand"] {
        $handW: 2px;
        $handH: 8px;
        @include transform(translate(-50%, -50%));
        @include animation-iteration-count(infinite);
        @include animation-timing-function(linear);
        position: absolute;
        height: $handW;
        width: $handW;
        left: 50%;
        top: 50%;
        z-index: 2;
        &:before {
            background-color: $c;
            content: '';
            display: block;
            position: absolute;
            width: 100%;
            bottom: -1px;
        }
        &.hand-little {
            z-index: 2;
            @include animation-duration(12s);
            &:before {
                //background: red;
                height: ceil($handH * 0.7);
            }
        }
        &.hand-big {
            z-index: 1;
            @include animation-duration(1s);
            &:before {
                //background: green;
                height: $handH;
            }
        }
    }
}

.l-time-conductor {
    $knobHOffset: 0px;
    $rangeValPad: $interiorMargin;
    $rangeValOffset: $sliderKnobW + $interiorMargin;
    $r1H: nth($ueTimeControlH, 1);
    $r2H: nth($ueTimeControlH, 2);
    $r3H: nth($ueTimeControlH, 3);

    // Glyphs Todo: replace with refactored CSS approach when that is merged into master
    $glyphIconFixed: '\e604';
    $glyphIconRealtime: '\43';
    $glyphIconLatest: '\44';

    position: relative;

    > .l-row-elem {
        // First order row elements
        box-sizing: border-box;
        width: 100%;
        position: relative;
    }

    .mode-selector .s-menu-btn,
    .time-delta {
        &:before {
            @extend .ui-symbol;
        }
    }

    .time-delta {
        &:before {
            color: $colorTimeCondKeyBg;
        }
    }

    .l-time-conductor-inputs-holder,
    .l-time-conductor-ticks {
        font-size: 0.8rem;
    }

    .l-time-conductor-inputs-holder {
        $trInputW: 180px;
        $hmInputW: 60px;
        $ticksBlockerFadeW: 50px;
        $iconCalendarW: 16px;
        $wBgColor: $colorBodyBg;

        height: $r1H;
        z-index: 1;
        .l-time-range-w {
            // Wraps a datetime text input field
            height: 100%;
            position: absolute;
            &.start-w {
                @include background-image(linear-gradient(270deg, transparent, $wBgColor $ticksBlockerFadeW));
                padding-right: $ticksBlockerFadeW;
            }
            &.end-w {
                @include background-image(linear-gradient(90deg, transparent, $wBgColor $ticksBlockerFadeW));
                padding-left: $ticksBlockerFadeW;
                right: 0;
                text-align: right;
            }
            input[type="text"] {
                @include trans-prop-nice(padding, 250ms);
            }
            .time-range-input input {
                width: $trInputW;
            }
            .hrs-min-input input {
                width: $hmInputW;
            }
            .icon-calendar {
                margin-top: 4px;
            }
        }
    }

    .l-time-conductor-ticks {
        $c: $colorTick;
        height: $r1H;
        mct-conductor-axis {
            display: block;
            position: relative;
            width: 100%;
        }
        .l-axis-holder {
            height: $r1H;
            position: relative;
            width: 100%;
            svg {
                text-rendering: geometricPrecision;
                width: 100%;
                height: 100%;
                > g {
                    font-size: 0.9em;
                }
                path {
                    display: none;
                }
                line {
                    // Tick marks
                    stroke: $c;
                }
                text {
                    fill: $c;
                }
            }
        }
    }
    .l-data-visualization {
        background: $colorTimeCondDataVisBg;
        height: $r2H;
    }

    .l-time-conductor-controls {
        margin-top: $interiorMargin;
    }
    // Fixed
    &.fixed-mode {
        .time-conductor-icon div[class*="hand"] {
            &.hand-little {
                @include transform(rotate(120deg));
            }
        }
    }

    // Realtime, latest modes
    &.realtime-mode,
    &.latest-mode {
        .time-conductor-icon {
            background: $colorTimeCondKeyBg;
            div[class*="hand"] {
                @include animation-name(clock-hands);
                &:before {
                    background: $colorTimeCondKeyBg;
                }
            }
        }

        .l-time-conductor-inputs-holder {
            .l-time-range-input-w {
                input[type="text"]:not(.error) {
                    background: transparent;
                    box-shadow: none;
                    border-radius: 0;
                    padding-left: 0;
                    padding-right: 0;
                    &:hover,
                    &:focus {
                        @include nice-input();
                        padding: $inputTextP;
                    }
                }
                &.start-date {
                    pointer-events: none;
                }
                .icon-calendar {
                    display: none;
                }
                &.end-date {
                    display: none;
                }
            }
        }

/*        .l-time-conductor-ticks .l-axis-holder {
            svg {
                line { color: $colorTimeCondKeyBg; };
                text { fill: $colorTimeCondKeyBg; }
            }
        }*/

        .l-data-visualization {
            background: $colorTimeCondDataVisRtBg !important
        }
        .mode-selector .s-menu-btn {
            @include btnSubtle($colorTimeCondKeyBg, pullForward($colorTimeCondKeyBg, $ltGamma), $colorTimeCondKeyFg);
        }
    }
    &.fixed-mode {
        $i: $glyphIconFixed;
        .mode-selector .s-menu-btn:before {
            content: $i;
        }
    }
    &.realtime-mode {
        $i: $glyphIconRealtime;
        .time-delta:before {
            content: $i;
        }
        .mode-selector .s-menu-btn:before {
            content: $i;
        }
    }
    &.latest-mode {
        $i: $glyphIconLatest;
        .time-delta:before {
            content: $i;
        }
        .mode-selector .s-menu-btn:before {
            content: $i;
        }
    }
}

.s-time-range-val {
    border-radius: $controlCr;
    background-color: $colorInputBg;
    padding: 1px 1px 0 $interiorMargin;
}

/******************************************************************** MOBILE */

@include phoneandtablet {
    .l-time-conductor {
        min-width: 0;
        .l-time-range-slider-holder,
        .l-time-conductor-ticks {
            display: none;
        }
    }
}

@include phone {
    .l-time-conductor {
        .l-time-conductor-inputs-holder {
            &.l-flex-row,
            .l-flex-row {
                @include align-items(flex-start);
            }
            .l-time-range-inputs-elem {
                &.type-icon {
                    margin-top: 3px;
                }
            }
            .l-time-conductor-inputs-holder {
                @include flex-direction(column);
                .l-time-range-input-w:not(:first-child) {
                    &:not(:first-child) {
                        margin-top: $interiorMargin;
                    }
                    margin-right: 0;
                }
                .l-time-range-inputs-elem {
                    &.lbl {
                        display: none;
                    }
                }
            }
        }
    }
}

@include phonePortrait {
    .l-time-conductor {
        .l-time-conductor-inputs-holder {
            .l-time-conductor-inputs-holder {
                @include flex(1 1 auto);
                padding-top: 25px; // Make room for the ever lovin' Time Domain Selector
                .flex-elem {
                    @include flex(1 1 auto);
                    width: 100%;
                }
                input[type="text"] {
                    width: 100%;
                }
            }
        }
    }
    .l-time-domain-selector {
        right: auto;
        left: 20px;
    }
}
